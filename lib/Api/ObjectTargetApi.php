<?php
/**
 * ObjectTargetApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Wikitude Studio API
 *
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip) * [`C# .NET Core`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-csharp-netcore.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ObjectTargetApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectTargetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createObjectTargetFromImages
     *
     * Create Object Target from Images
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetImagesBody $create_object_target_images_body create_object_target_images_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse
     */
    public function createObjectTargetFromImages($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
    {
        list($response) = $this->createObjectTargetFromImagesWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body);
        return $response;
    }

    /**
     * Operation createObjectTargetFromImagesWithHttpInfo
     *
     * Create Object Target from Images
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetImagesBody $create_object_target_images_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createObjectTargetFromImagesWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
    {
        $request = $this->createObjectTargetFromImagesRequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createObjectTargetFromImagesAsync
     *
     * Create Object Target from Images
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetImagesBody $create_object_target_images_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetFromImagesAsync($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
    {
        return $this->createObjectTargetFromImagesAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createObjectTargetFromImagesAsyncWithHttpInfo
     *
     * Create Object Target from Images
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetImagesBody $create_object_target_images_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetFromImagesAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
        $request = $this->createObjectTargetFromImagesRequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createObjectTargetFromImages'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetImagesBody $create_object_target_images_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createObjectTargetFromImagesRequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_images_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling createObjectTargetFromImages'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling createObjectTargetFromImages'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createObjectTargetFromImages'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling createObjectTargetFromImages'
            );
        }
        // verify the required parameter 'create_object_target_images_body' is set
        if ($create_object_target_images_body === null || (is_array($create_object_target_images_body) && count($create_object_target_images_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_object_target_images_body when calling createObjectTargetFromImages'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/images';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_object_target_images_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_object_target_images_body));
            } else {
                $httpBody = $create_object_target_images_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createObjectTargetFromWTO
     *
     * Create Object Target from WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetWTOBody $create_object_target_wto_body create_object_target_wto_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse
     */
    public function createObjectTargetFromWTO($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
    {
        list($response) = $this->createObjectTargetFromWTOWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body);
        return $response;
    }

    /**
     * Operation createObjectTargetFromWTOWithHttpInfo
     *
     * Create Object Target from WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetWTOBody $create_object_target_wto_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createObjectTargetFromWTOWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
    {
        $request = $this->createObjectTargetFromWTORequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createObjectTargetFromWTOAsync
     *
     * Create Object Target from WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetWTOBody $create_object_target_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetFromWTOAsync($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
    {
        return $this->createObjectTargetFromWTOAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createObjectTargetFromWTOAsyncWithHttpInfo
     *
     * Create Object Target from WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetWTOBody $create_object_target_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetFromWTOAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
        $request = $this->createObjectTargetFromWTORequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createObjectTargetFromWTO'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetWTOBody $create_object_target_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createObjectTargetFromWTORequest($x_version, $x_token, $content_type, $tc_id, $create_object_target_wto_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling createObjectTargetFromWTO'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling createObjectTargetFromWTO'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createObjectTargetFromWTO'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling createObjectTargetFromWTO'
            );
        }
        // verify the required parameter 'create_object_target_wto_body' is set
        if ($create_object_target_wto_body === null || (is_array($create_object_target_wto_body) && count($create_object_target_wto_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_object_target_wto_body when calling createObjectTargetFromWTO'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/wto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_object_target_wto_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_object_target_wto_body));
            } else {
                $httpBody = $create_object_target_wto_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteObjectTarget
     *
     * Delete Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteObjectTarget($x_version, $x_token, $tc_id, $target_id)
    {
        $this->deleteObjectTargetWithHttpInfo($x_version, $x_token, $tc_id, $target_id);
    }

    /**
     * Operation deleteObjectTargetWithHttpInfo
     *
     * Delete Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteObjectTargetWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
    {
        $request = $this->deleteObjectTargetRequest($x_version, $x_token, $tc_id, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteObjectTargetAsync
     *
     * Delete Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteObjectTargetAsync($x_version, $x_token, $tc_id, $target_id)
    {
        return $this->deleteObjectTargetAsyncWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteObjectTargetAsyncWithHttpInfo
     *
     * Delete Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteObjectTargetAsyncWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
    {
        $returnType = '';
        $request = $this->deleteObjectTargetRequest($x_version, $x_token, $tc_id, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteObjectTarget'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteObjectTargetRequest($x_version, $x_token, $tc_id, $target_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling deleteObjectTarget'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling deleteObjectTarget'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling deleteObjectTarget'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling deleteObjectTarget'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($target_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($target_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation extendObjectTarget
     *
     * Extend Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\ExtendObjectTargetBody $extend_object_target_body extend_object_target_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse
     */
    public function extendObjectTarget($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
    {
        list($response) = $this->extendObjectTargetWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body);
        return $response;
    }

    /**
     * Operation extendObjectTargetWithHttpInfo
     *
     * Extend Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\ExtendObjectTargetBody $extend_object_target_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function extendObjectTargetWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
    {
        $request = $this->extendObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extendObjectTargetAsync
     *
     * Extend Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\ExtendObjectTargetBody $extend_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extendObjectTargetAsync($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
    {
        return $this->extendObjectTargetAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extendObjectTargetAsyncWithHttpInfo
     *
     * Extend Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\ExtendObjectTargetBody $extend_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extendObjectTargetAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
        $request = $this->extendObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extendObjectTarget'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\ExtendObjectTargetBody $extend_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extendObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $extend_object_target_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling extendObjectTarget'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling extendObjectTarget'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling extendObjectTarget'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling extendObjectTarget'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling extendObjectTarget'
            );
        }
        // verify the required parameter 'extend_object_target_body' is set
        if ($extend_object_target_body === null || (is_array($extend_object_target_body) && count($extend_object_target_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extend_object_target_body when calling extendObjectTarget'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($target_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($target_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($extend_object_target_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($extend_object_target_body));
            } else {
                $httpBody = $extend_object_target_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTarget
     *
     * Get Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetResponse
     */
    public function getObjectTarget($x_version, $x_token, $tc_id, $target_id)
    {
        list($response) = $this->getObjectTargetWithHttpInfo($x_version, $x_token, $tc_id, $target_id);
        return $response;
    }

    /**
     * Operation getObjectTargetWithHttpInfo
     *
     * Get Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
    {
        $request = $this->getObjectTargetRequest($x_version, $x_token, $tc_id, $target_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetAsync
     *
     * Get Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetAsync($x_version, $x_token, $tc_id, $target_id)
    {
        return $this->getObjectTargetAsyncWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetAsyncWithHttpInfo
     *
     * Get Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetAsyncWithHttpInfo($x_version, $x_token, $tc_id, $target_id)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetResponse';
        $request = $this->getObjectTargetRequest($x_version, $x_token, $tc_id, $target_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTarget'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetRequest($x_version, $x_token, $tc_id, $target_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTarget'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTarget'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getObjectTarget'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling getObjectTarget'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/{targetId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($target_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($target_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTargetStatus
     *
     * Status - Object Target Generation Information
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse
     */
    public function getObjectTargetStatus($x_version, $x_token, $tc_id, $generation_id)
    {
        list($response) = $this->getObjectTargetStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id);
        return $response;
    }

    /**
     * Operation getObjectTargetStatusWithHttpInfo
     *
     * Status - Object Target Generation Information
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $request = $this->getObjectTargetStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetStatusAsync
     *
     * Status - Object Target Generation Information
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetStatusAsync($x_version, $x_token, $tc_id, $generation_id)
    {
        return $this->getObjectTargetStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetStatusAsyncWithHttpInfo
     *
     * Status - Object Target Generation Information
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
        $request = $this->getObjectTargetStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTargetStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetStatusRequest($x_version, $x_token, $tc_id, $generation_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTargetStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTargetStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getObjectTargetStatus'
            );
        }
        // verify the required parameter 'generation_id' is set
        if ($generation_id === null || (is_array($generation_id) && count($generation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generation_id when calling getObjectTargetStatus'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/generation/targets/{generationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($generation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'generationId' . '}',
                ObjectSerializer::toPathValue($generation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTargets
     *
     * Get Object Targets
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetResponse[]
     */
    public function getObjectTargets($x_version, $x_token, $tc_id)
    {
        list($response) = $this->getObjectTargetsWithHttpInfo($x_version, $x_token, $tc_id);
        return $response;
    }

    /**
     * Operation getObjectTargetsWithHttpInfo
     *
     * Get Object Targets
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetsWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->getObjectTargetsRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetsAsync
     *
     * Get Object Targets
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetsAsync($x_version, $x_token, $tc_id)
    {
        return $this->getObjectTargetsAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetsAsyncWithHttpInfo
     *
     * Get Object Targets
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetsAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetResponse[]';
        $request = $this->getObjectTargetsRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTargets'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetsRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTargets'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTargets'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getObjectTargets'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation renameObjectTarget
     *
     * Rename Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\RenameObjectTargetBody $rename_object_target_body rename_object_target_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse
     */
    public function renameObjectTarget($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
    {
        list($response) = $this->renameObjectTargetWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body);
        return $response;
    }

    /**
     * Operation renameObjectTargetWithHttpInfo
     *
     * Rename Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\RenameObjectTargetBody $rename_object_target_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function renameObjectTargetWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
    {
        $request = $this->renameObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation renameObjectTargetAsync
     *
     * Rename Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\RenameObjectTargetBody $rename_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameObjectTargetAsync($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
    {
        return $this->renameObjectTargetAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation renameObjectTargetAsyncWithHttpInfo
     *
     * Rename Object Target
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\RenameObjectTargetBody $rename_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function renameObjectTargetAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse';
        $request = $this->renameObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'renameObjectTarget'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $target_id Unique identifier of the Object Target. (required)
     * @param  \OpenAPI\Client\Model\RenameObjectTargetBody $rename_object_target_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function renameObjectTargetRequest($x_version, $x_token, $content_type, $tc_id, $target_id, $rename_object_target_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling renameObjectTarget'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling renameObjectTarget'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling renameObjectTarget'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling renameObjectTarget'
            );
        }
        // verify the required parameter 'target_id' is set
        if ($target_id === null || (is_array($target_id) && count($target_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $target_id when calling renameObjectTarget'
            );
        }
        // verify the required parameter 'rename_object_target_body' is set
        if ($rename_object_target_body === null || (is_array($rename_object_target_body) && count($rename_object_target_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rename_object_target_body when calling renameObjectTarget'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/target/{targetId}/name';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($target_id !== null) {
            $resourcePath = str_replace(
                '{' . 'targetId' . '}',
                ObjectSerializer::toPathValue($target_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($rename_object_target_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($rename_object_target_body));
            } else {
                $httpBody = $rename_object_target_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
