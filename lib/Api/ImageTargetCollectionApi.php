<?php
/**
 * ImageTargetCollectionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Wikitude Studio API
 *
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip) * [`C# .NET Core`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-csharp-netcore.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ImageTargetCollectionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageTargetCollectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createImageTargetCollection
     *
     * Create Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateImageTargetCollectionBody $create_image_target_collection_body create_image_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ImageTargetCollectionResponse
     */
    public function createImageTargetCollection($x_version, $x_token, $content_type, $create_image_target_collection_body)
    {
        list($response) = $this->createImageTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $create_image_target_collection_body);
        return $response;
    }

    /**
     * Operation createImageTargetCollectionWithHttpInfo
     *
     * Create Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateImageTargetCollectionBody $create_image_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ImageTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createImageTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $create_image_target_collection_body)
    {
        $request = $this->createImageTargetCollectionRequest($x_version, $x_token, $content_type, $create_image_target_collection_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ImageTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ImageTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ImageTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createImageTargetCollectionAsync
     *
     * Create Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateImageTargetCollectionBody $create_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImageTargetCollectionAsync($x_version, $x_token, $content_type, $create_image_target_collection_body)
    {
        return $this->createImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $create_image_target_collection_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createImageTargetCollectionAsyncWithHttpInfo
     *
     * Create Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateImageTargetCollectionBody $create_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $create_image_target_collection_body)
    {
        $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
        $request = $this->createImageTargetCollectionRequest($x_version, $x_token, $content_type, $create_image_target_collection_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createImageTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateImageTargetCollectionBody $create_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createImageTargetCollectionRequest($x_version, $x_token, $content_type, $create_image_target_collection_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling createImageTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling createImageTargetCollection'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createImageTargetCollection'
            );
        }
        // verify the required parameter 'create_image_target_collection_body' is set
        if ($create_image_target_collection_body === null || (is_array($create_image_target_collection_body) && count($create_image_target_collection_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_image_target_collection_body when calling createImageTargetCollection'
            );
        }

        $resourcePath = '/targetCollection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_image_target_collection_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_image_target_collection_body));
            } else {
                $httpBody = $create_image_target_collection_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteImageTargetCollection
     *
     * Delete Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteImageTargetCollection($x_version, $x_token, $tc_id)
    {
        $this->deleteImageTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id);
    }

    /**
     * Operation deleteImageTargetCollectionWithHttpInfo
     *
     * Delete Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteImageTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->deleteImageTargetCollectionRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteImageTargetCollectionAsync
     *
     * Delete Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImageTargetCollectionAsync($x_version, $x_token, $tc_id)
    {
        return $this->deleteImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteImageTargetCollectionAsyncWithHttpInfo
     *
     * Delete Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '';
        $request = $this->deleteImageTargetCollectionRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteImageTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteImageTargetCollectionRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling deleteImageTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling deleteImageTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling deleteImageTargetCollection'
            );
        }

        $resourcePath = '/targetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateCloudArchive
     *
     * Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CloudArchiveGenerationResponse
     */
    public function generateCloudArchive($x_version, $x_token, $tc_id)
    {
        list($response) = $this->generateCloudArchiveWithHttpInfo($x_version, $x_token, $tc_id);
        return $response;
    }

    /**
     * Operation generateCloudArchiveWithHttpInfo
     *
     * Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CloudArchiveGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateCloudArchiveWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->generateCloudArchiveRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\CloudArchiveGenerationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CloudArchiveGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CloudArchiveGenerationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CloudArchiveGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateCloudArchiveAsync
     *
     * Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCloudArchiveAsync($x_version, $x_token, $tc_id)
    {
        return $this->generateCloudArchiveAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateCloudArchiveAsyncWithHttpInfo
     *
     * Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateCloudArchiveAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '\OpenAPI\Client\Model\CloudArchiveGenerationResponse';
        $request = $this->generateCloudArchiveRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateCloudArchive'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateCloudArchiveRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling generateCloudArchive'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling generateCloudArchive'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling generateCloudArchive'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/generation/cloudarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateWTC
     *
     * Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTCBody $generate_wtc_body generate_wtc_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenerateWTCStatusResponse
     */
    public function generateWTC($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
    {
        list($response) = $this->generateWTCWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body);
        return $response;
    }

    /**
     * Operation generateWTCWithHttpInfo
     *
     * Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTCBody $generate_wtc_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenerateWTCStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateWTCWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
    {
        $request = $this->generateWTCRequest($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\GenerateWTCStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GenerateWTCStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GenerateWTCStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenerateWTCStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateWTCAsync
     *
     * Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTCBody $generate_wtc_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateWTCAsync($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
    {
        return $this->generateWTCAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateWTCAsyncWithHttpInfo
     *
     * Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTCBody $generate_wtc_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateWTCAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
    {
        $returnType = '\OpenAPI\Client\Model\GenerateWTCStatusResponse';
        $request = $this->generateWTCRequest($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateWTC'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTCBody $generate_wtc_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateWTCRequest($x_version, $x_token, $content_type, $tc_id, $generate_wtc_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling generateWTC'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling generateWTC'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling generateWTC'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling generateWTC'
            );
        }
        // verify the required parameter 'generate_wtc_body' is set
        if ($generate_wtc_body === null || (is_array($generate_wtc_body) && count($generate_wtc_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generate_wtc_body when calling generateWTC'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/generation/wtc';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($generate_wtc_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($generate_wtc_body));
            } else {
                $httpBody = $generate_wtc_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCloudArchiveStatus
     *
     * Status - Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CloudArchiveGenerationResponse
     */
    public function getCloudArchiveStatus($x_version, $x_token, $tc_id, $generation_id)
    {
        list($response) = $this->getCloudArchiveStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id);
        return $response;
    }

    /**
     * Operation getCloudArchiveStatusWithHttpInfo
     *
     * Status - Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CloudArchiveGenerationResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCloudArchiveStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $request = $this->getCloudArchiveStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CloudArchiveGenerationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CloudArchiveGenerationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CloudArchiveGenerationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CloudArchiveGenerationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCloudArchiveStatusAsync
     *
     * Status - Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudArchiveStatusAsync($x_version, $x_token, $tc_id, $generation_id)
    {
        return $this->getCloudArchiveStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCloudArchiveStatusAsyncWithHttpInfo
     *
     * Status - Generate Cloud Archive
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCloudArchiveStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $returnType = '\OpenAPI\Client\Model\CloudArchiveGenerationResponse';
        $request = $this->getCloudArchiveStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCloudArchiveStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCloudArchiveStatusRequest($x_version, $x_token, $tc_id, $generation_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getCloudArchiveStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getCloudArchiveStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getCloudArchiveStatus'
            );
        }
        // verify the required parameter 'generation_id' is set
        if ($generation_id === null || (is_array($generation_id) && count($generation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generation_id when calling getCloudArchiveStatus'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/generation/cloudarchive/{generationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($generation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'generationId' . '}',
                ObjectSerializer::toPathValue($generation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImageTargetCollection
     *
     * Get Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ImageTargetCollectionResponse
     */
    public function getImageTargetCollection($x_version, $x_token, $tc_id)
    {
        list($response) = $this->getImageTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id);
        return $response;
    }

    /**
     * Operation getImageTargetCollectionWithHttpInfo
     *
     * Get Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ImageTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->getImageTargetCollectionRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ImageTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ImageTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ImageTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImageTargetCollectionAsync
     *
     * Get Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageTargetCollectionAsync($x_version, $x_token, $tc_id)
    {
        return $this->getImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImageTargetCollectionAsyncWithHttpInfo
     *
     * Get Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
        $request = $this->getImageTargetCollectionRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImageTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImageTargetCollectionRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getImageTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getImageTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getImageTargetCollection'
            );
        }

        $resourcePath = '/targetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getImageTargetCollections
     *
     * Get all Image Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ImageTargetCollectionResponse[]
     */
    public function getImageTargetCollections($x_version, $x_token, $skip = null, $limit = null)
    {
        list($response) = $this->getImageTargetCollectionsWithHttpInfo($x_version, $x_token, $skip, $limit);
        return $response;
    }

    /**
     * Operation getImageTargetCollectionsWithHttpInfo
     *
     * Get all Image Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ImageTargetCollectionResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getImageTargetCollectionsWithHttpInfo($x_version, $x_token, $skip = null, $limit = null)
    {
        $request = $this->getImageTargetCollectionsRequest($x_version, $x_token, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ImageTargetCollectionResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ImageTargetCollectionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ImageTargetCollectionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getImageTargetCollectionsAsync
     *
     * Get all Image Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageTargetCollectionsAsync($x_version, $x_token, $skip = null, $limit = null)
    {
        return $this->getImageTargetCollectionsAsyncWithHttpInfo($x_version, $x_token, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getImageTargetCollectionsAsyncWithHttpInfo
     *
     * Get all Image Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getImageTargetCollectionsAsyncWithHttpInfo($x_version, $x_token, $skip = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse[]';
        $request = $this->getImageTargetCollectionsRequest($x_version, $x_token, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getImageTargetCollections'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getImageTargetCollectionsRequest($x_version, $x_token, $skip = null, $limit = null)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getImageTargetCollections'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getImageTargetCollections'
            );
        }

        $resourcePath = '/targetCollection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['skip'] = $skip;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }

        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSimilarityCheckStatus
     *
     * Status - Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimilarityCheckStatusResponse
     */
    public function getSimilarityCheckStatus($x_version, $x_token, $tc_id, $generation_id)
    {
        list($response) = $this->getSimilarityCheckStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id);
        return $response;
    }

    /**
     * Operation getSimilarityCheckStatusWithHttpInfo
     *
     * Status - Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimilarityCheckStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSimilarityCheckStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $request = $this->getSimilarityCheckStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SimilarityCheckStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SimilarityCheckStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SimilarityCheckStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SimilarityCheckStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSimilarityCheckStatusAsync
     *
     * Status - Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimilarityCheckStatusAsync($x_version, $x_token, $tc_id, $generation_id)
    {
        return $this->getSimilarityCheckStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSimilarityCheckStatusAsyncWithHttpInfo
     *
     * Status - Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSimilarityCheckStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $returnType = '\OpenAPI\Client\Model\SimilarityCheckStatusResponse';
        $request = $this->getSimilarityCheckStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSimilarityCheckStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getSimilarityCheckStatusRequest($x_version, $x_token, $tc_id, $generation_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getSimilarityCheckStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getSimilarityCheckStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getSimilarityCheckStatus'
            );
        }
        // verify the required parameter 'generation_id' is set
        if ($generation_id === null || (is_array($generation_id) && count($generation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generation_id when calling getSimilarityCheckStatus'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/similarity/{generationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($generation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'generationId' . '}',
                ObjectSerializer::toPathValue($generation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWTCStatus
     *
     * Status - Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenerateWTCStatusResponse
     */
    public function getWTCStatus($x_version, $x_token, $tc_id, $generation_id)
    {
        list($response) = $this->getWTCStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id);
        return $response;
    }

    /**
     * Operation getWTCStatusWithHttpInfo
     *
     * Status - Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenerateWTCStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWTCStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $request = $this->getWTCStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GenerateWTCStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GenerateWTCStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GenerateWTCStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenerateWTCStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWTCStatusAsync
     *
     * Status - Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWTCStatusAsync($x_version, $x_token, $tc_id, $generation_id)
    {
        return $this->getWTCStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWTCStatusAsyncWithHttpInfo
     *
     * Status - Generate WTC
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWTCStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $returnType = '\OpenAPI\Client\Model\GenerateWTCStatusResponse';
        $request = $this->getWTCStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWTCStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWTCStatusRequest($x_version, $x_token, $tc_id, $generation_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getWTCStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getWTCStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getWTCStatus'
            );
        }
        // verify the required parameter 'generation_id' is set
        if ($generation_id === null || (is_array($generation_id) && count($generation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generation_id when calling getWTCStatus'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/generation/wtc/{generationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($generation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'generationId' . '}',
                ObjectSerializer::toPathValue($generation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation similarityCheck
     *
     * Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\SimilarityCheckBody $similarity_check_body similarity_check_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SimilarityCheckResponse
     */
    public function similarityCheck($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
    {
        list($response) = $this->similarityCheckWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $similarity_check_body);
        return $response;
    }

    /**
     * Operation similarityCheckWithHttpInfo
     *
     * Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\SimilarityCheckBody $similarity_check_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SimilarityCheckResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function similarityCheckWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
    {
        $request = $this->similarityCheckRequest($x_version, $x_token, $content_type, $tc_id, $similarity_check_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\SimilarityCheckResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SimilarityCheckResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SimilarityCheckResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SimilarityCheckResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation similarityCheckAsync
     *
     * Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\SimilarityCheckBody $similarity_check_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function similarityCheckAsync($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
    {
        return $this->similarityCheckAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation similarityCheckAsyncWithHttpInfo
     *
     * Similarity Check
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\SimilarityCheckBody $similarity_check_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function similarityCheckAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
    {
        $returnType = '\OpenAPI\Client\Model\SimilarityCheckResponse';
        $request = $this->similarityCheckRequest($x_version, $x_token, $content_type, $tc_id, $similarity_check_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'similarityCheck'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\SimilarityCheckBody $similarity_check_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function similarityCheckRequest($x_version, $x_token, $content_type, $tc_id, $similarity_check_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling similarityCheck'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling similarityCheck'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling similarityCheck'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling similarityCheck'
            );
        }
        // verify the required parameter 'similarity_check_body' is set
        if ($similarity_check_body === null || (is_array($similarity_check_body) && count($similarity_check_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $similarity_check_body when calling similarityCheck'
            );
        }

        $resourcePath = '/targetCollection/{tcId}/similarity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($similarity_check_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($similarity_check_body));
            } else {
                $httpBody = $similarity_check_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateImageTargetCollection
     *
     * Update Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateImageTargetCollectionBody $update_image_target_collection_body update_image_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ImageTargetCollectionResponse
     */
    public function updateImageTargetCollection($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
    {
        list($response) = $this->updateImageTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body);
        return $response;
    }

    /**
     * Operation updateImageTargetCollectionWithHttpInfo
     *
     * Update Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateImageTargetCollectionBody $update_image_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ImageTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateImageTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
    {
        $request = $this->updateImageTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ImageTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ImageTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ImageTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateImageTargetCollectionAsync
     *
     * Update Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateImageTargetCollectionBody $update_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageTargetCollectionAsync($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
    {
        return $this->updateImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateImageTargetCollectionAsyncWithHttpInfo
     *
     * Update Image Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateImageTargetCollectionBody $update_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateImageTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
    {
        $returnType = '\OpenAPI\Client\Model\ImageTargetCollectionResponse';
        $request = $this->updateImageTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateImageTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Image Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateImageTargetCollectionBody $update_image_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateImageTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_image_target_collection_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling updateImageTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling updateImageTargetCollection'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling updateImageTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling updateImageTargetCollection'
            );
        }
        // verify the required parameter 'update_image_target_collection_body' is set
        if ($update_image_target_collection_body === null || (is_array($update_image_target_collection_body) && count($update_image_target_collection_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_image_target_collection_body when calling updateImageTargetCollection'
            );
        }

        $resourcePath = '/targetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_image_target_collection_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_image_target_collection_body));
            } else {
                $httpBody = $update_image_target_collection_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
