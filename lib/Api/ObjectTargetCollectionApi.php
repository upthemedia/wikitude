<?php
/**
 * ObjectTargetCollectionApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Wikitude Studio API
 *
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip) * [`C# .NET Core`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-csharp-netcore.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Query;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ObjectTargetCollectionApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ObjectTargetCollectionApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createObjectTargetCollection
     *
     * Create Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetCollectionBody $create_object_target_collection_body create_object_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionResponse
     */
    public function createObjectTargetCollection($x_version, $x_token, $content_type, $create_object_target_collection_body)
    {
        list($response) = $this->createObjectTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $create_object_target_collection_body);
        return $response;
    }

    /**
     * Operation createObjectTargetCollectionWithHttpInfo
     *
     * Create Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetCollectionBody $create_object_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createObjectTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $create_object_target_collection_body)
    {
        $request = $this->createObjectTargetCollectionRequest($x_version, $x_token, $content_type, $create_object_target_collection_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createObjectTargetCollectionAsync
     *
     * Create Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetCollectionBody $create_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetCollectionAsync($x_version, $x_token, $content_type, $create_object_target_collection_body)
    {
        return $this->createObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $create_object_target_collection_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createObjectTargetCollectionAsyncWithHttpInfo
     *
     * Create Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetCollectionBody $create_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $create_object_target_collection_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
        $request = $this->createObjectTargetCollectionRequest($x_version, $x_token, $content_type, $create_object_target_collection_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createObjectTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  \OpenAPI\Client\Model\CreateObjectTargetCollectionBody $create_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createObjectTargetCollectionRequest($x_version, $x_token, $content_type, $create_object_target_collection_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling createObjectTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling createObjectTargetCollection'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createObjectTargetCollection'
            );
        }
        // verify the required parameter 'create_object_target_collection_body' is set
        if ($create_object_target_collection_body === null || (is_array($create_object_target_collection_body) && count($create_object_target_collection_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_object_target_collection_body when calling createObjectTargetCollection'
            );
        }

        $resourcePath = '/objectTargetCollection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_object_target_collection_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_object_target_collection_body));
            } else {
                $httpBody = $create_object_target_collection_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteObjectTargetCollection
     *
     * Delete Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteObjectTargetCollection($x_version, $x_token, $tc_id)
    {
        $this->deleteObjectTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id);
    }

    /**
     * Operation deleteObjectTargetCollectionWithHttpInfo
     *
     * Delete Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteObjectTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->deleteObjectTargetCollectionRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteObjectTargetCollectionAsync
     *
     * Delete Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteObjectTargetCollectionAsync($x_version, $x_token, $tc_id)
    {
        return $this->deleteObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteObjectTargetCollectionAsyncWithHttpInfo
     *
     * Delete Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '';
        $request = $this->deleteObjectTargetCollectionRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteObjectTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteObjectTargetCollectionRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling deleteObjectTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling deleteObjectTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling deleteObjectTargetCollection'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation generateWTO
     *
     * Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTOBody $generate_wto_body generate_wto_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionJobResponse
     */
    public function generateWTO($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
    {
        list($response) = $this->generateWTOWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wto_body);
        return $response;
    }

    /**
     * Operation generateWTOWithHttpInfo
     *
     * Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTOBody $generate_wto_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateWTOWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
    {
        $request = $this->generateWTORequest($x_version, $x_token, $content_type, $tc_id, $generate_wto_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 202:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateWTOAsync
     *
     * Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTOBody $generate_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateWTOAsync($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
    {
        return $this->generateWTOAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateWTOAsyncWithHttpInfo
     *
     * Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTOBody $generate_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateWTOAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse';
        $request = $this->generateWTORequest($x_version, $x_token, $content_type, $tc_id, $generate_wto_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateWTO'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\GenerateWTOBody $generate_wto_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateWTORequest($x_version, $x_token, $content_type, $tc_id, $generate_wto_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling generateWTO'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling generateWTO'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling generateWTO'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling generateWTO'
            );
        }
        // verify the required parameter 'generate_wto_body' is set
        if ($generate_wto_body === null || (is_array($generate_wto_body) && count($generate_wto_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generate_wto_body when calling generateWTO'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/generation/wto';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($generate_wto_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($generate_wto_body));
            } else {
                $httpBody = $generate_wto_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTargetCollection
     *
     * Get Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionResponse
     */
    public function getObjectTargetCollection($x_version, $x_token, $tc_id)
    {
        list($response) = $this->getObjectTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id);
        return $response;
    }

    /**
     * Operation getObjectTargetCollectionWithHttpInfo
     *
     * Get Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetCollectionWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $request = $this->getObjectTargetCollectionRequest($x_version, $x_token, $tc_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetCollectionAsync
     *
     * Get Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionAsync($x_version, $x_token, $tc_id)
    {
        return $this->getObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetCollectionAsyncWithHttpInfo
     *
     * Get Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $tc_id)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
        $request = $this->getObjectTargetCollectionRequest($x_version, $x_token, $tc_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetCollectionRequest($x_version, $x_token, $tc_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getObjectTargetCollection'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTargetCollectionStatus
     *
     * Status - Get Object Target Collection jobs
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  int $skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10 (optional)
     * @param  string $source filter the jobs by source. Available values (api, studio). Default value: api (optional)
     * @param  string $type filter the jobs by type. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetJobResponse[]
     */
    public function getObjectTargetCollectionStatus($x_version, $x_token, $tc_id, $skip = null, $limit = null, $source = null, $type = null)
    {
        list($response) = $this->getObjectTargetCollectionStatusWithHttpInfo($x_version, $x_token, $tc_id, $skip, $limit, $source, $type);
        return $response;
    }

    /**
     * Operation getObjectTargetCollectionStatusWithHttpInfo
     *
     * Status - Get Object Target Collection jobs
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  int $skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10 (optional)
     * @param  string $source filter the jobs by source. Available values (api, studio). Default value: api (optional)
     * @param  string $type filter the jobs by type. (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetJobResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetCollectionStatusWithHttpInfo($x_version, $x_token, $tc_id, $skip = null, $limit = null, $source = null, $type = null)
    {
        $request = $this->getObjectTargetCollectionStatusRequest($x_version, $x_token, $tc_id, $skip, $limit, $source, $type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetJobResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetJobResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetJobResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetCollectionStatusAsync
     *
     * Status - Get Object Target Collection jobs
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  int $skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10 (optional)
     * @param  string $source filter the jobs by source. Available values (api, studio). Default value: api (optional)
     * @param  string $type filter the jobs by type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionStatusAsync($x_version, $x_token, $tc_id, $skip = null, $limit = null, $source = null, $type = null)
    {
        return $this->getObjectTargetCollectionStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $skip, $limit, $source, $type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetCollectionStatusAsyncWithHttpInfo
     *
     * Status - Get Object Target Collection jobs
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  int $skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10 (optional)
     * @param  string $source filter the jobs by source. Available values (api, studio). Default value: api (optional)
     * @param  string $type filter the jobs by type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $skip = null, $limit = null, $source = null, $type = null)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetJobResponse[]';
        $request = $this->getObjectTargetCollectionStatusRequest($x_version, $x_token, $tc_id, $skip, $limit, $source, $type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTargetCollectionStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  int $skip Set 0 to start with first collection, set e.g. to 2 to skip first 2 collections. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 20] per page. Default value: 10 (optional)
     * @param  string $source filter the jobs by source. Available values (api, studio). Default value: api (optional)
     * @param  string $type filter the jobs by type. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetCollectionStatusRequest($x_version, $x_token, $tc_id, $skip = null, $limit = null, $source = null, $type = null)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTargetCollectionStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTargetCollectionStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getObjectTargetCollectionStatus'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/jobs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['skip'] = $skip;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }
        // query params
        if (is_array($source)) {
            $source = ObjectSerializer::serializeCollection($source, '', true);
        }
        if ($source !== null) {
            $queryParams['source'] = $source;
        }
        // query params
        if (is_array($type)) {
            $type = ObjectSerializer::serializeCollection($type, '', true);
        }
        if ($type !== null) {
            $queryParams['type'] = $type;
        }

        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getObjectTargetCollections
     *
     * Get all Object Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionResponse[]
     */
    public function getObjectTargetCollections($x_version, $x_token, $skip = null, $limit = null)
    {
        list($response) = $this->getObjectTargetCollectionsWithHttpInfo($x_version, $x_token, $skip, $limit);
        return $response;
    }

    /**
     * Operation getObjectTargetCollectionsWithHttpInfo
     *
     * Get all Object Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getObjectTargetCollectionsWithHttpInfo($x_version, $x_token, $skip = null, $limit = null)
    {
        $request = $this->getObjectTargetCollectionsRequest($x_version, $x_token, $skip, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionResponse[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse[]';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getObjectTargetCollectionsAsync
     *
     * Get all Object Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionsAsync($x_version, $x_token, $skip = null, $limit = null)
    {
        return $this->getObjectTargetCollectionsAsyncWithHttpInfo($x_version, $x_token, $skip, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getObjectTargetCollectionsAsyncWithHttpInfo
     *
     * Get all Object Target Collections
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getObjectTargetCollectionsAsyncWithHttpInfo($x_version, $x_token, $skip = null, $limit = null)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse[]';
        $request = $this->getObjectTargetCollectionsRequest($x_version, $x_token, $skip, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getObjectTargetCollections'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  int $skip Set 0 to start with first entry, set e.g. to 2 to skip first 2 entries. Default value: 0 (optional)
     * @param  int $limit Use positive value to define the amount of entries to return [1, 1000] per page. Default value: 1000 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getObjectTargetCollectionsRequest($x_version, $x_token, $skip = null, $limit = null)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getObjectTargetCollections'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getObjectTargetCollections'
            );
        }

        $resourcePath = '/objectTargetCollection';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($skip)) {
            $skip = ObjectSerializer::serializeCollection($skip, '', true);
        }
        if ($skip !== null) {
            $queryParams['skip'] = $skip;
        }
        // query params
        if (is_array($limit)) {
            $limit = ObjectSerializer::serializeCollection($limit, '', true);
        }
        if ($limit !== null) {
            $queryParams['limit'] = $limit;
        }

        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }



        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWTOStatus
     *
     * Status - Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionJobResponse
     */
    public function getWTOStatus($x_version, $x_token, $tc_id, $generation_id)
    {
        list($response) = $this->getWTOStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id);
        return $response;
    }

    /**
     * Operation getWTOStatusWithHttpInfo
     *
     * Status - Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionJobResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWTOStatusWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $request = $this->getWTOStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWTOStatusAsync
     *
     * Status - Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWTOStatusAsync($x_version, $x_token, $tc_id, $generation_id)
    {
        return $this->getWTOStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWTOStatusAsyncWithHttpInfo
     *
     * Status - Generate WTO
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWTOStatusAsyncWithHttpInfo($x_version, $x_token, $tc_id, $generation_id)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionJobResponse';
        $request = $this->getWTOStatusRequest($x_version, $x_token, $tc_id, $generation_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWTOStatus'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  string $generation_id Unique identifier of the asynchronous job created by a generation endpoint. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWTOStatusRequest($x_version, $x_token, $tc_id, $generation_id)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling getWTOStatus'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling getWTOStatus'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling getWTOStatus'
            );
        }
        // verify the required parameter 'generation_id' is set
        if ($generation_id === null || (is_array($generation_id) && count($generation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $generation_id when calling getWTOStatus'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}/generation/wto/{generationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }
        // path params
        if ($generation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'generationId' . '}',
                ObjectSerializer::toPathValue($generation_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateObjectTargetCollection
     *
     * Update Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateObjectTargetCollectionBody $update_object_target_collection_body update_object_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ObjectTargetCollectionResponse
     */
    public function updateObjectTargetCollection($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
    {
        list($response) = $this->updateObjectTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body);
        return $response;
    }

    /**
     * Operation updateObjectTargetCollectionWithHttpInfo
     *
     * Update Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateObjectTargetCollectionBody $update_object_target_collection_body (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ObjectTargetCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateObjectTargetCollectionWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
    {
        $request = $this->updateObjectTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ObjectTargetCollectionResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ObjectTargetCollectionResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ObjectTargetCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateObjectTargetCollectionAsync
     *
     * Update Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateObjectTargetCollectionBody $update_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateObjectTargetCollectionAsync($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
    {
        return $this->updateObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateObjectTargetCollectionAsyncWithHttpInfo
     *
     * Update Object Target Collection
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateObjectTargetCollectionBody $update_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateObjectTargetCollectionAsyncWithHttpInfo($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
    {
        $returnType = '\OpenAPI\Client\Model\ObjectTargetCollectionResponse';
        $request = $this->updateObjectTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateObjectTargetCollection'
     *
     * @param  string $x_version The version of the API to be used. Must be set to 3. (required)
     * @param  string $x_token Your Manager Token. (required)
     * @param  string $content_type The Content Type of the body. Must be set to application/json. (required)
     * @param  string $tc_id Unique identifier of the Object Target Collection. (required)
     * @param  \OpenAPI\Client\Model\UpdateObjectTargetCollectionBody $update_object_target_collection_body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateObjectTargetCollectionRequest($x_version, $x_token, $content_type, $tc_id, $update_object_target_collection_body)
    {
        // verify the required parameter 'x_version' is set
        if ($x_version === null || (is_array($x_version) && count($x_version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_version when calling updateObjectTargetCollection'
            );
        }
        // verify the required parameter 'x_token' is set
        if ($x_token === null || (is_array($x_token) && count($x_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_token when calling updateObjectTargetCollection'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling updateObjectTargetCollection'
            );
        }
        // verify the required parameter 'tc_id' is set
        if ($tc_id === null || (is_array($tc_id) && count($tc_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tc_id when calling updateObjectTargetCollection'
            );
        }
        // verify the required parameter 'update_object_target_collection_body' is set
        if ($update_object_target_collection_body === null || (is_array($update_object_target_collection_body) && count($update_object_target_collection_body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $update_object_target_collection_body when calling updateObjectTargetCollection'
            );
        }

        $resourcePath = '/objectTargetCollection/{tcId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_version !== null) {
            $headerParams['X-Version'] = ObjectSerializer::toHeaderValue($x_version);
        }
        // header params
        if ($x_token !== null) {
            $headerParams['X-Token'] = ObjectSerializer::toHeaderValue($x_token);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($tc_id !== null) {
            $resourcePath = str_replace(
                '{' . 'tcId' . '}',
                ObjectSerializer::toPathValue($tc_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_object_target_collection_body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_object_target_collection_body));
            } else {
                $httpBody = $update_object_target_collection_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
