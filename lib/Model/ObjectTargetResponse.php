<?php
/**
 * ObjectTargetResponse
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Wikitude Studio API
 *
 * The Wikitude Studio API is a RESTful API which is used to * organize and manipulate projects and its targets * create wtc/wto files which can be used to create trackers in the Wikitude SDK with the JavaScript API * generate/publish a cloud archive to the cloud recognition service (image targets only)  Download API clients: * [`OpenAPI 3.0`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-openapi.zip) * [`JavaScript`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-javascript.zip) * [`Python`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-python.zip) * [`PHP`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-php.zip) * [`TypeScript (NodeJS)`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-typescript-node.zip) * [`Java`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-java.zip) * [`Ruby`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-ruby.zip) * [`C# .NET Core`](https://www.wikitude.com/external/doc/documentation/studio-api/clients/wikitude_studio_api_client-csharp-netcore.zip)  This technical reference formally explains various API endpoints. Visit the [`Studio API documentation`](https://www.wikitude.com/external/doc/documentation/studio/) for a more general description.
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjectTargetResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class ObjectTargetResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ObjectTargetResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'type' => 'string',
        'file_size' => 'float',
        'mod_dat' => 'float',
        'cre_dat' => 'float',
        'is_expandable' => 'bool',
        'real_world_scale' => 'float',
        'resource' => '\OpenAPI\Client\Model\ObjectTargetResponseResource',
        'thumbnail_url' => 'string',
        'wto_file' => '\OpenAPI\Client\Model\ObjectTargetResponseWtoFile'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'type' => null,
        'file_size' => null,
        'mod_dat' => null,
        'cre_dat' => null,
        'is_expandable' => null,
        'real_world_scale' => null,
        'resource' => null,
        'thumbnail_url' => null,
        'wto_file' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'file_size' => 'fileSize',
        'mod_dat' => 'modDat',
        'cre_dat' => 'creDat',
        'is_expandable' => 'isExpandable',
        'real_world_scale' => 'realWorldScale',
        'resource' => 'resource',
        'thumbnail_url' => 'thumbnailUrl',
        'wto_file' => 'wtoFile'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'file_size' => 'setFileSize',
        'mod_dat' => 'setModDat',
        'cre_dat' => 'setCreDat',
        'is_expandable' => 'setIsExpandable',
        'real_world_scale' => 'setRealWorldScale',
        'resource' => 'setResource',
        'thumbnail_url' => 'setThumbnailUrl',
        'wto_file' => 'setWtoFile'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'file_size' => 'getFileSize',
        'mod_dat' => 'getModDat',
        'cre_dat' => 'getCreDat',
        'is_expandable' => 'getIsExpandable',
        'real_world_scale' => 'getRealWorldScale',
        'resource' => 'getResource',
        'thumbnail_url' => 'getThumbnailUrl',
        'wto_file' => 'getWtoFile'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['file_size'] = $data['file_size'] ?? null;
        $this->container['mod_dat'] = $data['mod_dat'] ?? null;
        $this->container['cre_dat'] = $data['cre_dat'] ?? null;
        $this->container['is_expandable'] = $data['is_expandable'] ?? null;
        $this->container['real_world_scale'] = $data['real_world_scale'] ?? null;
        $this->container['resource'] = $data['resource'] ?? null;
        $this->container['thumbnail_url'] = $data['thumbnail_url'] ?? null;
        $this->container['wto_file'] = $data['wto_file'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique identifier of the Target.
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the Target.
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Type of the Target (\"Image\" for Image Targets or \"Object\" for Object Targets).
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets file_size
     *
     * @return float|null
     */
    public function getFileSize()
    {
        return $this->container['file_size'];
    }

    /**
     * Sets file_size
     *
     * @param float|null $file_size File size of the stored resource.
     *
     * @return self
     */
    public function setFileSize($file_size)
    {
        $this->container['file_size'] = $file_size;

        return $this;
    }

    /**
     * Gets mod_dat
     *
     * @return float|null
     */
    public function getModDat()
    {
        return $this->container['mod_dat'];
    }

    /**
     * Sets mod_dat
     *
     * @param float|null $mod_dat Modification timestamp.
     *
     * @return self
     */
    public function setModDat($mod_dat)
    {
        $this->container['mod_dat'] = $mod_dat;

        return $this;
    }

    /**
     * Gets cre_dat
     *
     * @return float|null
     */
    public function getCreDat()
    {
        return $this->container['cre_dat'];
    }

    /**
     * Sets cre_dat
     *
     * @param float|null $cre_dat Creation timestamp.
     *
     * @return self
     */
    public function setCreDat($cre_dat)
    {
        $this->container['cre_dat'] = $cre_dat;

        return $this;
    }

    /**
     * Gets is_expandable
     *
     * @return bool|null
     */
    public function getIsExpandable()
    {
        return $this->container['is_expandable'];
    }

    /**
     * Sets is_expandable
     *
     * @param bool|null $is_expandable Indicates if an Object Target is extendable to improve tracking and recognition quality. Only Image-based Object Targets are extendable.
     *
     * @return self
     */
    public function setIsExpandable($is_expandable)
    {
        $this->container['is_expandable'] = $is_expandable;

        return $this;
    }

    /**
     * Gets real_world_scale
     *
     * @return float|null
     */
    public function getRealWorldScale()
    {
        return $this->container['real_world_scale'];
    }

    /**
     * Sets real_world_scale
     *
     * @param float|null $real_world_scale The physical (real world) size of the Target, in millimeters. Set to null to reset.
     *
     * @return self
     */
    public function setRealWorldScale($real_world_scale)
    {
        $this->container['real_world_scale'] = $real_world_scale;

        return $this;
    }

    /**
     * Gets resource
     *
     * @return \OpenAPI\Client\Model\ObjectTargetResponseResource|null
     */
    public function getResource()
    {
        return $this->container['resource'];
    }

    /**
     * Sets resource
     *
     * @param \OpenAPI\Client\Model\ObjectTargetResponseResource|null $resource resource
     *
     * @return self
     */
    public function setResource($resource)
    {
        $this->container['resource'] = $resource;

        return $this;
    }

    /**
     * Gets thumbnail_url
     *
     * @return string|null
     */
    public function getThumbnailUrl()
    {
        return $this->container['thumbnail_url'];
    }

    /**
     * Sets thumbnail_url
     *
     * @param string|null $thumbnail_url URL to the Target resource thumbnail.
     *
     * @return self
     */
    public function setThumbnailUrl($thumbnail_url)
    {
        $this->container['thumbnail_url'] = $thumbnail_url;

        return $this;
    }

    /**
     * Gets wto_file
     *
     * @return \OpenAPI\Client\Model\ObjectTargetResponseWtoFile|null
     */
    public function getWtoFile()
    {
        return $this->container['wto_file'];
    }

    /**
     * Sets wto_file
     *
     * @param \OpenAPI\Client\Model\ObjectTargetResponseWtoFile|null $wto_file wto_file
     *
     * @return self
     */
    public function setWtoFile($wto_file)
    {
        $this->container['wto_file'] = $wto_file;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


